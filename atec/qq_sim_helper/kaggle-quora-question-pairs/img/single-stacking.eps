%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 735.000000 436.000000
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 368 218
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 368 218
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /S put
dup 34 /one put
dup 35 /two put
dup 36 /three put
dup 37 /four put
dup 38 /five put
dup 39 /O put
dup 40 /n put
dup 41 /l put
dup 42 /i put
dup 43 /e put
dup 44 /space put
dup 45 /D put
dup 46 /a put
dup 47 /t put
dup 48 /T put
dup 49 /r put
dup 50 /g put
dup 51 /V put
dup 52 /d put
dup 53 /o put
dup 54 /s put
dup 55 /F put
dup 56 /numbersign put
dup 57 /uniFB04 put
dup 58 /u put
dup 59 /C put
dup 60 /c put
dup 61 /m put
dup 62 /p put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<









00>] def
/CharStrings 32 dict dup begin
/.notdef 0 def
/space 1 def
/numbersign 2 def
/one 3 def
/two 4 def
/three 5 def
/four 6 def
/five 7 def
/C 8 def
/D 9 def
/F 10 def
/O 11 def
/S 12 def
/T 13 def
/V 14 def
/a 15 def
/c 16 def
/d 17 def
/e 18 def
/g 19 def
/i 20 def
/l 21 def
/m 22 def
/n 23 def
/o 24 def
/p 25 def
/r 26 def
/s 27 def
/t 28 def
/u 29 def
/uniFB04 30 def
/uni2B91 31 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4243299 def
currentdict currentfile eexec




615071A7D57347CBA53D37F78949D01EB4D97BEE6A8DAC02832FD8D6487D7A5FE663957130D62F2C1DCE76146D5FE638391F868B6D6D9D4EAFCEB157F3C1CDB98778D606EA3E3C5CE485E8BA88ABB0B5CD8AD11871217F264FA65207D5D89D400D2D39E5832E6F5E542F03EEE2EDA01D068639FF4190863CF1B3594636B299B99F00C39116E7395AB0F6C1824BB0424CB35B819697063791377772FF9B5E4D42D7E624C9725989498B914F2A93D80D42DD3F7A15C57D7817F64AA7BE0892E6ACC1520F959A7E18A37E3C0D0E1D14054EDD0D9CBAAB27F07E3C8BF0328C4D18E83C0DC02563F368DF18DD98221806E45AFFBD0A7C3B3DE0BD86D13BC27A61113A369401AEBDB8082A0BAD4E18A59A5D37645223BE8FCC6940FE4413D907F18DBF380337CB0F8831A0BB462357CA042360ACE389AF21BB47D58DCE3ABF93322BF6DBBE92E28719CCBC00F1B381773BA8270BEBF2F68FA0A7D7D9D0E3AEA7BD9F2E57B26F4450FD58748F8DF6170E5EDE23CBF614A9D661EC473EF7501E0A1E1A4F9D1B56035A941C22E5E6B25A852B46F808626CA761BDBF5373EC0EF429D61934238925B9A48A30806A29997A1F71B18C8D09FD623A5A6886F20EBE13E0AD226BCB4FDBDD4F508E9DFDB867E49865AAFC85F9C1DF40513CDB020EEE72DC58E6109CA52162FB411E53191B15C92310B228B69FD4878B9DBF99A58C51A76F064A10B6438FFA5419BDBCB76C4E48820846D267833948A05788D8AADF2DDA34A9D67D08CF87D446067916F8D14848D9F10A128556747B75BA55106A12C1C981E68C261EEC07844AE0B9BF0E75446BB84FF1D7429252B985F682608EF067A21AFE4ACD305CF5120F92E8A8B0B38CE5CAAF95CAE7135B8DA046EE171BADCDA2372A65110D1F95E6B44247F33B5CEA0517C34988B1F3585B664F57FC20F384D0037E1D5299CB03FA1ED883D7E153EFC315634CEBB685EEC10414FA3691298BAAFA0CEDDF9CA85B2E4B57304B27BF2AF7BF3CB839064BB058596119433BEF0466AC62F6468882FB4230BF5C41E0B71F6A563A6326D2D81FE6BC3BBF9CEC2B94E5390F8E1657A8581548D5EA15F677A0922969E4815D26B83743F97BE5860A85535CB2DFF29C6D3532DCBAF26BD8AB42C0EBC7524307D63A20B7C4C3E444F6B8CA7950FF73DF35ADA1C52A42EE8ADD2AB3A2967F8831F38C8515C6E663DABB7DFCE8861B07A16794C386DB4A6EE36E8490F6CEDB21B011FDE255C12B7FA8AB2AEB31C15B3075CC41D2EBA097226DA6B23E4B907382CAA2E289C57BAB19CCE1733027AE74A78205CFD522879CD03CDF1F61EDF4994A405AAAF2DED55DDEBA172DB2D8AD9448CCB981E0E6942804E84D538D569C116A7956D1C1316C7F54D2CAC654522B02F806D19D53DB13ACFD9298ACA13905F57EE7B6C0E617560136AC8743A1E08EEBC9
9ED104D93A4CC628C8EA78764230AC3879EF89CBE2076EFCBA71EFED2503DC7A1241AC03E5891367A7AE44A3018BCF9AC49A32201A2F65F77DD060830CF70DD4FEE8D2E0F774D62D11D85465C57E1105E07821A40C6D59C904382459BEE45508DA5596DFF154F0ACB1C49D3F22458F1EB37F6A24FF05429CA6C3AD5A082D7AC110D35EF4C572CC348D6C5E9C834BEA428E1291D343B478D6805435D373B7A337A403A7B3E6A27BE6F5C7386AC87FE66AFD2F4CBC33F92304D98361E238371728E57DEBE39679576831446E03DFD918CAD739FA8DC7F15100B14961B711CCE49136406CB4AA5BF8ECC16EE5F20CAA58C02C0FDDCAEBBF214B9C0E01785A45936E5EA509854F40C2124BFA083AC903816209C4ACAF336EEF552F012DFF4680E8EF1E6182B7AED1D1882133B2F039602FD0C1AC982D6794594D8081AC3EB6307706A0406ED74F6C5A5A427B0523E9FDCC1CB144D0698F96F384016FB229B66212EF495DF86F8DB4A132175DE6AA72C5999640B7B7633DC6778CA6CABD6ED1B4300770317E1138F5203CB059C731924AE3CA23E5BDF959A2B52696ECF2ACC673AD2D08A0CDA06CF8BA581589917263ACF40DB8A0CAE4BFA8CCA3C342F461265EB5CF3E6F1A6AE55E725F06F61F92CD08860C05FB71655687F75B65D510A6B994EF29815DD775E9944B60F2D462E1851B3858E1D8D4A3EB76F177D94DA07021D2B391ECF1564BEE7841E7943C30B738786C9C07080B1FE68D21D4B17FB1D89DF422839A629B2C6234B23B2C58076373575FD383CB241C0D1ACCD118D86C5E237B57ED5DEF6B27609F4AEADFE799A613C006C8A84D587882E71DABC62B49971518194BEA02798343CC4A9DC102A2F2E604343786C6B4FECC710879AEC02581841C216D4AD0E31F43B368FF6428A86B51A0644678136741AAF4EACEEAFB3DEA1C2FF1CA21EF56D25E5A7417BCD719F85C5D82999510969631DEDAF325488F40E5F7DDE9B6102EF4F8052B7F8083B0DDB047C38FE54DEF6B28D09ABA6D66A0E85F9E0ED0FFEFE73FE677DAA2A16FF5FABF46B90F02850ABE6CF70ED44F7E2454EC59C908B70DF36AA52FC14DC6B1C7271154E00B6246919B87672A5B099C40F455D27A8E2A8C9CD7F7453C5524CCE685167D65395787AE5F3128F5DF4920B8FD9E6E17BA7C5C28D216A11045F32E2269F5439A62D91A28663A973F57B05C040E14D6C32F7700E13F7A166BEB2AFD117A698498751F4E0B190993EFA824B5998E74BB6C90DC82F765AD12CB159F1DED51EA072BDE413116B8223C855477CB25B15BFCBE8304DDAD58CB65074A442D0D50BD210332A34F6579C2E220C2EAA2EE11FD8C2B32A2937F45A3D7D404B25535CA5D3BA76D078DE41AD970BE0B60DC472C4F08A01B35FD9169F527459C0908B0CDD5AE447315A75DD9D5E003CFA7D7BAD28A3BD654
EC4A52681832C0426E3BE791F1E2EB847C747A7B8E37F87C2B80BD8E49EAD665D81F575154F6545C58D8112AF557D0CE7888331CE608A54474D022F46AF0A187A77D595F4A6ACBB81F517205D47DDD9EE3AD5462187A14D67FF9ED03F8383C4E45B74B2FE2592354E12FB8AA9FE38CA5EA229EA62C1C0D92F592F7487A9AAE35474EA1808F3A88B4B52FF1FE34B6158FF983AE812EE5CCF136248C0A7020504A86F2F40B9B0777BB6EAE2CB867D68AC3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 367.5 218 rc
-4 238 m
662 238 l
662 -200.5 l
-4 -200.5 l
h
-4 238 m
f
1 J
1 j
[
8
5
] 0 d
0.60000002 i
0 0 0 sc
0.5 0 0 -0.5 -4 238 cm
413.85828 107.71654 m
490.39371 107.71654 l
490.39371 391.18109 l
413.85828 391.18109 l
h
413.85828 107.71654 m
S
510.23621 107.71654 m
700.15747 107.71654 l
700.15747 391.18109 l
510.23621 391.18109 l
h
510.23621 107.71654 m
S
[] 0 d
141.73228 124.72441 m
192.75591 124.72441 l
192.75591 155.90552 l
141.73228 155.90552 l
h
141.73228 124.72441 m
S
/Cs2 SC
0 sc
0 i
0.5 0 0 -0.5 79.622047 167.84251 cm
/F1.1[ 16 0 0 -16 0 0]sf
-9.632 5.776001 m
(!")[ 10.368000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 -4 238 cm
192.75591 124.72441 m
243.77953 124.72441 l
243.77953 155.90552 l
192.75591 155.90552 l
h
192.75591 124.72441 m
S
/Cs2 SC
0 sc
0 i
0.5 0 0 -0.5 105.13386 167.84251 cm
-9.632 5.776001 m
(!#)[ 10.368000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 -4 238 cm
243.77953 124.72441 m
294.80316 124.72441 l
294.80316 155.90552 l
243.77953 155.90552 l
h
243.77953 124.72441 m
S
/Cs2 SC
0 sc
0 i
0.5 0 0 -0.5 130.64568 167.84251 cm
-9.632 5.776001 m
(!$)[ 10.368000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 -4 238 cm
337.32285 124.72441 m
388.34647 124.72441 l
388.34647 155.90552 l
337.32285 155.90552 l
h
337.32285 124.72441 m
S
/Cs2 SC
0 sc
0 i
0.5 0 0 -0.5 177.41733 167.84251 cm
-9.632 5.776001 m
(!%)[ 10.368000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 -4 238 cm
425.19684 124.72441 m
476.22046 124.72441 l
476.22046 155.90552 l
425.19684 155.90552 l
h
425.19684 124.72441 m
S
/Cs2 SC
0 sc
0 i
0.5 0 0 -0.5 221.35432 167.84251 cm
-9.632 5.776001 m
(!&)[ 10.368000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 -4 238 cm
518.74017 124.72441 m
691.65356 124.72441 l
691.65356 155.90552 l
518.74017 155.90552 l
h
518.74017 124.72441 m
S
/Cs2 SC
0 sc
0 i
0.5 0 0 -0.5 298.59842 167.84251 cm
-41.792 5.776001 m
('\(\)*\(+,-./.)[ 12.160000 8.896000 3.552000 3.552000 8.896000 8.592000 4.448000 11.264000 8.592000 5.040000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 -4 238 cm
141.73228 178.58267 m
192.75591 178.58267 l
192.75591 209.76378 l
141.73228 209.76378 l
h
141.73228 178.58267 m
S
/Cs2 SC
0 sc
0 i
0.5 0 0 -0.5 79.622047 140.91339 cm
-9.632 5.776001 m
(!#)[ 10.368000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 -4 238 cm
192.75591 178.58267 m
243.77953 178.58267 l
243.77953 209.76378 l
192.75591 209.76378 l
h
192.75591 178.58267 m
S
/Cs2 SC
0 sc
0 i
0.5 0 0 -0.5 105.13386 140.91339 cm
-9.632 5.776001 m
(!$)[ 10.368000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 -4 238 cm
243.77953 178.58267 m
294.80316 178.58267 l
294.80316 209.76378 l
243.77953 209.76378 l
h
243.77953 178.58267 m
S
/Cs2 SC
0 sc
0 i
0.5 0 0 -0.5 130.64568 140.91339 cm
-9.632 5.776001 m
(!%)[ 10.368000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 -4 238 cm
337.32285 178.58267 m
388.34647 178.58267 l
388.34647 209.76378 l
337.32285 209.76378 l
h
337.32285 178.58267 m
S
/Cs2 SC
0 sc
0 i
0.5 0 0 -0.5 177.41733 140.91339 cm
-9.632 5.776001 m
(!&)[ 10.368000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 -4 238 cm
425.19684 178.58267 m
476.22046 178.58267 l
476.22046 209.76378 l
425.19684 209.76378 l
h
425.19684 178.58267 m
S
/Cs2 SC
0 sc
0 i
0.5 0 0 -0.5 221.35432 140.91339 cm
-9.632 5.776001 m
(!")[ 10.368000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 -4 238 cm
518.74017 178.58267 m
691.65356 178.58267 l
691.65356 209.76378 l
518.74017 209.76378 l
h
518.74017 178.58267 m
S
/Cs2 SC
0 sc
0 i
0.5 0 0 -0.5 298.59842 140.91339 cm
-41.792 5.776001 m
('\(\)*\(+,-./.)[ 12.160000 8.896000 3.552000 3.552000 8.896000 8.592000 4.448000 11.264000 8.592000 5.040000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 -4 238 cm
141.73228 232.44095 m
192.75591 232.44095 l
192.75591 263.62204 l
141.73228 263.62204 l
h
141.73228 232.44095 m
S
/Cs2 SC
0 sc
0 i
0.5 0 0 -0.5 79.622047 113.98425 cm
-9.632 5.776001 m
(!$)[ 10.368000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 -4 238 cm
192.75591 232.44095 m
243.77953 232.44095 l
243.77953 263.62204 l
192.75591 263.62204 l
h
192.75591 232.44095 m
S
/Cs2 SC
0 sc
0 i
0.5 0 0 -0.5 105.13386 113.98425 cm
-9.632 5.776001 m
(!%)[ 10.368000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 -4 238 cm
243.77953 232.44095 m
294.80316 232.44095 l
294.80316 263.62204 l
243.77953 263.62204 l
h
243.77953 232.44095 m
S
/Cs2 SC
0 sc
0 i
0.5 0 0 -0.5 130.64568 113.98425 cm
-9.632 5.776001 m
(!&)[ 10.368000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 -4 238 cm
337.32285 232.44095 m
388.34647 232.44095 l
388.34647 263.62204 l
337.32285 263.62204 l
h
337.32285 232.44095 m
S
/Cs2 SC
0 sc
0 i
0.5 0 0 -0.5 177.41733 113.98425 cm
-9.632 5.776001 m
(!")[ 10.368000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 -4 238 cm
425.19684 232.44095 m
476.22046 232.44095 l
476.22046 263.62204 l
425.19684 263.62204 l
h
425.19684 232.44095 m
S
/Cs2 SC
0 sc
0 i
0.5 0 0 -0.5 221.35432 113.98425 cm
-9.632 5.776001 m
(!#)[ 10.368000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 -4 238 cm
518.74017 232.44095 m
691.65356 232.44095 l
691.65356 263.62204 l
518.74017 263.62204 l
h
518.74017 232.44095 m
S
/Cs2 SC
0 sc
0 i
0.5 0 0 -0.5 298.59842 113.98425 cm
-41.792 5.776001 m
('\(\)*\(+,-./.)[ 12.160000 8.896000 3.552000 3.552000 8.896000 8.592000 4.448000 11.264000 8.592000 5.040000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 -4 238 cm
141.73228 286.29922 m
192.75591 286.29922 l
192.75591 317.48032 l
141.73228 317.48032 l
h
141.73228 286.29922 m
S
/Cs2 SC
0 sc
0 i
0.5 0 0 -0.5 79.622047 87.055122 cm
-9.632 5.776001 m
(!%)[ 10.368000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 -4 238 cm
192.75591 286.29922 m
243.77953 286.29922 l
243.77953 317.48032 l
192.75591 317.48032 l
h
192.75591 286.29922 m
S
/Cs2 SC
0 sc
0 i
0.5 0 0 -0.5 105.13386 87.055122 cm
-9.632 5.776001 m
(!&)[ 10.368000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 -4 238 cm
243.77953 286.29922 m
294.80316 286.29922 l
294.80316 317.48032 l
243.77953 317.48032 l
h
243.77953 286.29922 m
S
/Cs2 SC
0 sc
0 i
0.5 0 0 -0.5 130.64568 87.055122 cm
-9.632 5.776001 m
(!")[ 10.368000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 -4 238 cm
337.32285 286.29922 m
388.34647 286.29922 l
388.34647 317.48032 l
337.32285 317.48032 l
h
337.32285 286.29922 m
S
/Cs2 SC
0 sc
0 i
0.5 0 0 -0.5 177.41733 87.055122 cm
-9.632 5.776001 m
(!#)[ 10.368000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 -4 238 cm
425.19684 286.29922 m
476.22046 286.29922 l
476.22046 317.48032 l
425.19684 317.48032 l
h
425.19684 286.29922 m
S
/Cs2 SC
0 sc
0 i
0.5 0 0 -0.5 221.35432 87.055122 cm
-9.632 5.776001 m
(!$)[ 10.368000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 -4 238 cm
518.74017 286.29922 m
691.65356 286.29922 l
691.65356 317.48032 l
518.74017 317.48032 l
h
518.74017 286.29922 m
S
/Cs2 SC
0 sc
0 i
0.5 0 0 -0.5 298.59842 87.055122 cm
-41.792 5.776001 m
('\(\)*\(+,-./.)[ 12.160000 8.896000 3.552000 3.552000 8.896000 8.592000 4.448000 11.264000 8.592000 5.040000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 -4 238 cm
141.73228 340.15747 m
192.75591 340.15747 l
192.75591 371.33859 l
141.73228 371.33859 l
h
141.73228 340.15747 m
S
/Cs2 SC
0 sc
0 i
0.5 0 0 -0.5 79.622047 60.125984 cm
-9.632 5.776001 m
(!&)[ 10.368000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 -4 238 cm
192.75591 340.15747 m
243.77953 340.15747 l
243.77953 371.33859 l
192.75591 371.33859 l
h
192.75591 340.15747 m
S
/Cs2 SC
0 sc
0 i
0.5 0 0 -0.5 105.13386 60.125984 cm
-9.632 5.776001 m
(!")[ 10.368000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 -4 238 cm
243.77953 340.15747 m
294.80316 340.15747 l
294.80316 371.33859 l
243.77953 371.33859 l
h
243.77953 340.15747 m
S
/Cs2 SC
0 sc
0 i
0.5 0 0 -0.5 130.64568 60.125984 cm
-9.632 5.776001 m
(!#)[ 10.368000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 -4 238 cm
337.32285 340.15747 m
388.34647 340.15747 l
388.34647 371.33859 l
337.32285 371.33859 l
h
337.32285 340.15747 m
S
/Cs2 SC
0 sc
0 i
0.5 0 0 -0.5 177.41733 60.125984 cm
-9.632 5.776001 m
(!$)[ 10.368000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 -4 238 cm
425.19684 340.15747 m
476.22046 340.15747 l
476.22046 371.33859 l
425.19684 371.33859 l
h
425.19684 340.15747 m
S
/Cs2 SC
0 sc
0 i
0.5 0 0 -0.5 221.35432 60.125984 cm
-9.632 5.776001 m
(!%)[ 10.368000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 -4 238 cm
518.74017 340.15747 m
691.65356 340.15747 l
691.65356 371.33859 l
518.74017 371.33859 l
h
518.74017 340.15747 m
S
/Cs2 SC
0 sc
0 i
0.5 0 0 -0.5 298.59842 60.125984 cm
-41.792 5.776001 m
('\(\)*\(+,-./.)[ 12.160000 8.896000 3.552000 3.552000 8.896000 8.592000 4.448000 11.264000 8.592000 5.040000 0.000000 ] xS
0.5 0 0 -0.5 103.74779 201.14961 cm
/F1.1[ 17 0 0 -17 0 0]sf
-29.597 5.762001 m
(01.*\(*\(2)[ 8.194000 5.661000 9.129000 3.774000 9.452000 3.774000 9.452000 0.000000 ] xS
0.5 0 0 -0.5 176.03125 200.39568 cm
-36.839001 5.762001 m
(3.\)*4./*5\()[ 9.452000 9.129000 3.774000 3.774000 10.081000 9.129000 5.355000 3.774000 9.758000 0.000000 ] xS
0.5 0 0 -0.5 221.61417 200.39568 cm
-15.4275 5.762001 m
(0+6/)[ 7.871000 9.129000 8.500000 0.000000 ] xS
0.5 0 0 -0.5 298.1496 200.39568 cm
-42.041 5.762001 m
('\(\)*\(+,0+6/)[ 12.920000 9.452000 3.774000 3.774000 9.452000 9.129000 4.726000 7.871000 9.129000 8.500000 0.000000 ] xS
0.5 0 0 -0.5 31.464321 167.79724 cm
-26.137501 5.762001 m
(75\)48")[ 9.758000 9.758000 3.774000 10.081000 9.452000 0.000000 ] xS
0.5 0 0 -0.5 31.464321 140.86812 cm
-26.137501 5.762001 m
(75\)48#)[ 9.758000 9.758000 3.774000 10.081000 9.452000 0.000000 ] xS
0.5 0 0 -0.5 31.464321 113.93898 cm
-26.137501 5.762001 m
(75\)48$)[ 9.758000 9.758000 3.774000 10.081000 9.452000 0.000000 ] xS
0.5 0 0 -0.5 31.464321 87.009842 cm
-26.137501 5.762001 m
(75\)48%)[ 9.758000 9.758000 3.774000 10.081000 9.452000 0.000000 ] xS
0.5 0 0 -0.5 31.464321 60.080711 cm
-26.137501 5.762001 m
(75\)48&)[ 9.758000 9.758000 3.774000 10.081000 9.452000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 -4 238 cm
144.56693 433.70078 m
430.86615 433.70078 l
430.86615 464.8819 l
144.56693 464.8819 l
h
144.56693 433.70078 m
S
/Cs2 SC
0 sc
0 i
0.5 0 0 -0.5 139.85826 13.354332 cm
/F1.1[ 16 0 0 -16 0 0]sf
-71.152 5.776001 m
('9*\(+,-./.,7+./:1+)[ 12.160000 12.784000 3.552000 8.896000 8.592000 4.448000 11.264000 8.592000 5.040000 8.592000 4.448000 9.184000 8.592000 8.592000 5.040000 8.896000 5.040000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 -4 238 cm
430.86615 433.70078 m
700.15747 433.70078 l
700.15747 464.8819 l
430.86615 464.8819 l
h
430.86615 433.70078 m
S
/Cs2 SC
0 sc
0 i
0.5 0 0 -0.5 278.75589 13.354332 cm
-70.984001 5.776001 m
('\(\)*\(+,-./.,7+./:1+)[ 12.160000 8.896000 3.552000 3.552000 8.896000 8.592000 4.448000 11.264000 8.592000 5.040000 8.592000 4.448000 9.184000 8.592000 8.592000 5.040000 8.896000 5.040000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 -4 238 cm
455.79147 391.18109 m
456.37796 413.85828 l
S
606.28815 391.18109 m
606.53796 423.61996 l
S
0 J
0 j
0 i
606.59955 431.61975 m
609.53784 423.59686 l
603.53802 423.64307 l
h
606.59955 431.61975 m
S
/Cs2 SC
0 sc
0.5 0 0 -0.5 156.66536 29.653545 cm
/F1.1[ 17 0 0 -17 0 0]sf
-27.5485 5.762001 m
(;5\(<./)[ 12.274000 9.758000 9.452000 9.129000 9.129000 0.000000 ] xS
0.5 0 0 -0.5 320.5748 28.990158 cm
-28.815001 5.762001 m
(!.=>\)+)[ 11.016000 9.129000 14.501000 10.081000 3.774000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 -4 238 cm
456.37796 413.85828 m
368.50394 413.85828 l
S
368.50394 413.85828 m
368.61194 423.80136 l
S
0 J
0 j
0 i
368.69882 431.8009 m
371.61176 423.7688 l
365.61209 423.83395 l
h
368.69882 431.8009 m
S
1 J
1 j
0.60000002 i
39.842518 51.023621 m
711.33856 51.023621 l
722.38428 51.023621 731.33856 59.977928 731.33856 71.023621 c
731.33856 382.51968 l
731.33856 393.56537 722.38428 402.51968 711.33856 402.51968 c
39.842518 402.51968 l
28.796825 402.51968 19.84252 393.56537 19.84252 382.51968 c
19.84252 71.023621 l
19.84252 59.977928 28.796825 51.023621 39.842518 51.023621 c
h
39.842518 51.023621 m
S
ep
end
%%Trailer
%%EOF
